---
title: "OEDA Brand Theme Demo"
author: "Oregon Enterprise Data Analytics"
date: "today"
---

# OEDA Branding Tests

## Testing Typography

This is a paragraph using the base font (Noto Sans Regular). If this text and the headings look correct, then the typography from `_brand.yml` is working as expected.

### This is a Sub-Heading

This section will test if we can embed one of the logos directly into the document body using the same path defined in `_brand.yml`.

If you can see the wide OEDA logo below, it confirms that the path is correct and Quarto can find your assets folder.

## Testing Logo Darkmode Toggle

::: {.callout-warning title="Dark Mode Images"}
To enable switching to dark mode images in the body of the website document, you need to use HTML to toggle between the images, rather than quarto's native functionality.
:::

```
<p>
  <img src="/assets/oeda-logo-horizontal-light.svg" alt="OEDA Light Logo Test" class="logo-light" style="max-width: 400px; background-color: #F4F2ED; padding: 10px; border-radius: 5px;">
  <img src="/assets/oeda-logo-horizontal-dark-clean.svg" alt="OEDA Dark Logo Test" class="logo-dark" style="max-width: 400px;">
</p>
```

<p>
  <img src="/assets/oeda-logo-wide-light.svg" alt="OEDA Light Logo Test" class="logo-light" style="max-width: 400px; background-color: #F4F2ED; padding: 10px; border-radius: 5px;">

  <img src="/assets/oeda-logo-horizontal-dark-clean.svg" alt="OEDA Dark Logo Test" class="logo-dark" style="max-width: 400px;">
</p>
------------------------------------------------------------------------

## Testing Color Palettes

```{r}
#| label: fig-swatches
#| fig-cap: "Brand Color Swatches and Tints"
#| echo: false
#| warning: false
#| message: false
#| fig-showtext: true  

# Load necessary libraries
library(yaml)
library(ggplot2)
library(dplyr)
library(thematic)
library(showtext)

# --- Font & Theme Setup ---
showtext_auto() # Enables custom fonts in plots
showtext_opts(dpi = 300) # <-- Optional: Improves text rendering quality

# Let thematic automatically handle the theme based on the Quarto theme
thematic_on(font = "auto")

# Function to determine text color for contrast
get_text_color <- function(hex_color) {
  if (is.na(hex_color) || !grepl("^#[0-9A-Fa-f]{6}$", hex_color, ignore.case = TRUE)) {
    return("black")
  }
  rgb_vals <- grDevices::col2rgb(hex_color)
  luminance <- 0.2126 * rgb_vals[1,] + 0.7152 * rgb_vals[2,] + 0.0722 * rgb_vals[3,]
  ifelse(luminance > 140, "black", "white")
}

# --- Data Preparation ---
all_colors <- read_yaml("_brand.yml")
color_list <- all_colors[!grepl("font", names(all_colors))]
color_list <- color_list[!sapply(color_list, is.null)]
flat_colors <- unlist(color_list)

color_df <- tibble(
  name = names(flat_colors),
  hex = as.character(unname(flat_colors))
)

# Validation and filtering step
is_valid_hex <- grepl("^#[0-9A-Fa-f]{6}$", color_df$hex, ignore.case = TRUE)
plot_df <- color_df |>
  filter(is_valid_hex) |>
  mutate(
    base_color = sub("-\\d{2}$", "", name),
    tint_level = ifelse(grepl("-\\d{2}$", name), as.numeric(sub(".*-", "", name)), 100)
  ) |>
  rowwise() |>
  mutate(text_color = get_text_color(hex)) |>
  ungroup()

palette_order <- c(
  "north-star-indigo", "glacial-blue", "fog-gray",
  "forest-green", "willamette-green", "mist-grey",
  "marionberry-red", "harvest-gold", "desert-sand", "ashland-charcoal"
)

plot_df <- plot_df |>
  mutate(
    short_name = sub(".*\\.", "", base_color),
    short_name = factor(short_name, levels = palette_order)
  ) |>
  arrange(short_name, desc(tint_level)) |>
  mutate(base_color_ordered = factor(base_color, levels = unique(base_color)))

# --- Plotting ---
if (nrow(plot_df) > 0) {
  p <- ggplot(plot_df, aes(x = factor(tint_level, levels = c(100, 80, 60, 40, 20, 10)),
                       y = base_color_ordered, fill = hex)) +
    geom_tile(color = "white", linewidth = 2) +
    geom_text(aes(label = hex, color = text_color), size = 3, family = "sans") +
    scale_fill_identity() +
    scale_color_identity() +
    scale_y_discrete(limits = rev) +
    labs(x = "Tint Level (% of Original Color)", y = NULL, title = "Brand Color Palette") +
    theme_minimal(base_family = "sans") +
    theme(
      panel.grid = element_blank(),
      axis.text.x = element_text(angle = 0, hjust = 0.5),
      plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(b = 10))
    )
  print(p)
}

# --- Cleanup ---
thematic_off()
showtext_auto(FALSE) 
```

## Single HTML file

::: {.callout-warning title="Single HTML Files are different"}
Single HTML files do not render a navbar by default. If you don't use the website project, you must copy the following code block into your `.qmd` file's YAML header for each file. Because of this, it is recommended you create content in quarto as a website, instead of a single html file.
:::

```
---
title: "OEDA Brand Theme Demo"
author: "Oregon Enterprise Data Analytics"
date: "today"
format: 
  html:
    # --- Add this entire navbar section ---
    navbar:
      title: "Theme Demo"
      logo: /assets/oeda-logo-primary-clean.svg
      logo-alt: "OEDA Logo"
    # --- End of navbar section ---
    theme:
      - theme.scss
      - theme-dark.scss
    toc: true
    toc-float: true
    code-copy: true
---
```
