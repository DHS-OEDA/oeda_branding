---
title: "OEDA HTML Branding Demo"
author: "Aaron Cochran"
date: "today"
format:
  html:
    theme:
      light: [flatly, theme.scss]
      dark: [darkly, theme-dark.scss]
    toc: true
    code-fold: true
knitr: 
  opts_chunk: 
    echo: false
    warning: false
    message: false
    fig.width: 8
    fig.height: 6
    dev: "svglite"
resources:
  - /assets/*
---

```{r setup}
#| include: false
library(ggplot2)
library(dplyr)
library(knitr)
library(svglite)
library(yaml)
source("oeda_themes.R")
```

# OEDA Branding Tests

## Testing Typography

This is a paragraph using the base font (Noto Sans Regular). If this text and the headings look correct, then the typography from `_brand.yml` is working as expected.

### This is a Sub-Heading

This section will test if we can embed one of the logos directly into the document body using the same path defined in `_brand.yml`.

## Testing Light and Dark Mode

::: {.callout-note}
### Hybrid Approach: CSS + Renderings

This document uses a **hybrid approach**:
- **CSS classes** (`.light-content` and `.dark-content`) for logos and HTML content
- **`renderings: [light, dark]`** for ggplot2 plots and R graphics

This is necessary because Quarto's `renderings` feature only works for plot outputs, not HTML content.
:::

### Logos Using CSS Classes

::: {.light-content}

![OEDA ICON](/assets/oeda-icon-fixed.png)

![OEDA WIDE LOGO](/assets/oeda-logo-wide-light-fixed.svg)

![OEDA VERTICAL LOGO](/assets/oeda-logo-primary-fixed.svg)

:::

::: {.dark-content}

![OEDA ICON](/assets/oeda-icon-dark-fixed.png)

![OEDA WIDE LOGO](/assets/oeda-logo-wide-dark-fixed.svg)

![OEDA DARK LOGO](/assets/oeda-logo-primary-dark-fixed.svg)

:::

---

## Testing Color Palettes

```{r color-swatches}
# Complete function to determine text color for contrast
determine_text_color <- function(hex_color) {
  if (is.na(hex_color) || !grepl("^#[0-9A-Fa-f]{6}$", hex_color, ignore.case = TRUE)) {
    return("black")
  }
  rgb_values <- grDevices::col2rgb(hex_color)
  luminance_calc <- 0.2126 * rgb_values[1,] + 0.7152 * rgb_values[2,] + 0.0722 * rgb_values[3,]
  ifelse(luminance_calc > 140, "black", "white")
}

# Read brand colors with fallback
if (file.exists("_brand.yml")) {
  brand_data <- read_yaml("_brand.yml")
  color_palette <- brand_data$color$palette
} else {
  # Fallback colors
  color_palette <- list(
    `north-star-indigo` = "#2E3192",
    `north-star-indigo-80` = "#585AA8",
    `north-star-indigo-60` = "#8283BE",
    `north-star-indigo-40` = "#ACADD3",
    `north-star-indigo-20` = "#D6D6E9",
    `glacial-blue` = "#B4DCF5",
    `glacial-blue-80` = "#C3E3F7",
    `glacial-blue-60` = "#D1EAF9",
    `fog-gray` = "#F4F2ED",
    `forest-green` = "#184E49",
    `willamette-green` = "#86C679",
    `mist-grey` = "#D8E1E5",
    `marionberry-red` = "#A91F50",
    `harvest-gold` = "#ECD263",
    `desert-sand` = "#EDDFD4",
    `ashland-charcoal` = "#414042",
    `ashland-charcoal-80` = "#676668",
    `ashland-charcoal-20` = "#D9D9D9"
  )
}

# Convert to flat list and create data frame
all_colors_flat <- unlist(color_palette)
colors_df <- tibble(
  name = names(all_colors_flat),
  hex = as.character(unname(all_colors_flat))
)

# Process for plotting
valid_hex_pattern <- grepl("^#[0-9A-Fa-f]{6}$", colors_df$hex, ignore.case = TRUE)
plot_data <- colors_df |>
  filter(valid_hex_pattern) |>
  mutate(
    base_name = sub("-\\d{2}$", "", name),
    tint_percent = ifelse(grepl("-\\d{2}$", name), as.numeric(sub(".*-", "", name)), 100)
  ) |>
  rowwise() |>
  mutate(text_color = determine_text_color(hex)) |>
  ungroup()

# Define order for display
color_order <- c(
  "north-star-indigo", "glacial-blue", "fog-gray",
  "forest-green", "willamette-green", "mist-grey",
  "marionberry-red", "harvest-gold", "desert-sand", "ashland-charcoal"
)

# Organize for plotting
final_plot_data <- plot_data |>
  mutate(
    display_name = sub(".*\\.", "", base_name),
    display_name = factor(display_name, levels = color_order)
  ) |>
  arrange(display_name, desc(tint_percent)) |>
  mutate(ordered_base = factor(base_name, levels = unique(base_name)))

# Create the plot
color_swatch_plot <- ggplot(final_plot_data, 
                           aes(x = factor(tint_percent, levels = c(100, 80, 60, 40, 20, 10)),
                               y = ordered_base, fill = hex)) +
  geom_tile(color = NA) +
  geom_text(aes(label = hex, color = text_color), size = 3, family = "sans") +
  scale_fill_identity() +
  scale_color_identity() +
  scale_y_discrete(limits = rev) +
  labs(x = "Tint Level (% of Original Color)", y = NULL, title = "Brand Color Palette") +
  theme_minimal(base_family = "sans") +
  theme(
    panel.grid = element_blank(),
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(b = 10))
  )
```

```{r render-swatch-plots}
#| fig-cap: "Brand Color Swatches and Tints"
#| renderings: [light, dark]

color_swatch_plot + theme_oeda_light()

color_swatch_plot + theme_oeda_dark()
```

## Example Plots with Renderings

```{r scatter-plot}
scatter_example <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 3, alpha = 0.8) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1) +
  labs(
    title = "Vehicle Fuel Efficiency Analysis",
    subtitle = "Weight vs MPG colored by cylinder count",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon", 
    color = "Cylinders",
    caption = "Data: Motor Trend Car Road Tests"
  ) +
  scale_color_manual(values = c("#2E3192", "#86C679", "#A91F50"))
```

```{r render-scatter-plot}
#| fig-cap: "Vehicle efficiency analysis"
#| renderings: [light, dark]

scatter_example + theme_oeda_light()
scatter_example + theme_oeda_dark()
```

```{r bar-chart}
mpg_summary <- mtcars %>%
  group_by(cyl) %>%
  summarise(
    avg_mpg = mean(mpg),
    se = sd(mpg) / sqrt(n()),
    .groups = "drop"
  )

bar_example <- ggplot(mpg_summary, aes(x = factor(cyl), y = avg_mpg, fill = factor(cyl))) +
  geom_col(alpha = 0.8, width = 0.7) +
  geom_errorbar(aes(ymin = avg_mpg - se, ymax = avg_mpg + se), 
                width = 0.2, alpha = 0.7) +
  labs(
    title = "Average Fuel Efficiency by Engine Type", 
    subtitle = "Error bars show standard error",
    x = "Number of Cylinders",
    y = "Average Miles per Gallon",
    fill = "Cylinders",
    caption = "Data: Motor Trend Car Road Tests"
  ) +
  scale_fill_manual(values = c("#184E49", "#86C679", "#A91F50")) +
  guides(fill = "none")
```

```{r render-bar-plot}
#| fig-cap: "Average MPG by cylinder count"
#| renderings: [light, dark]

bar_example + theme_oeda_light()
bar_example + theme_oeda_dark()
```