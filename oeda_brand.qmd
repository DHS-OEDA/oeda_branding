---
title: "OEDA HTML Branding Demo"
author: "Aaron Cochran"
date: "today"
knitr: 
  opts_chunk: 
    dev: !expr c("svglite", "darksvglite")
    fig.ext: !expr c(".light.svg", ".dark.svg")
---

```{r setup}
#| include: false

# Load libraries
library(ggplot2)
library(dplyr)
library(knitr)
library(svglite)

# Source your theme file
source("oeda_themes.R")

# Set default chunk options
opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  fig.width = 8,
  fig.height = 6,
  dev = c("svglite", "darksvglite"),
  fig.ext = c(".light.svg", ".dark.svg")
)
```

# OEDA Branding Tests

## Testing Typography

This is a paragraph using the base font (Noto Sans Regular). If this text and the headings look correct, then the typography from `_brand.yml` is working as expected.

### This is a Sub-Heading

This section will test if we can embed one of the logos directly into the document body using the same path defined in `_brand.yml`.

## Testing Light and Dark Mode

### Logos

::: {.light-content}

Here's some text that should only appear in light mode, and the light wide logo.

![OEDA logo](/assets/oeda-logo-wide-light.svg)

:::

::: {.dark-content}

This is the dark mode text, and the dark wide logo.

![OEDA logo](/assets/oeda-logo-horizontal-dark-clean.svg)

:::

------------------------------------------------------------------------

## Testing Color Palettes

```{r}
#| label: fig-swatches
#| fig-cap: "Brand Color Swatches and Tints"
#| echo: false
#| warning: false
#| message: false

# Load necessary libraries
library(yaml)
library(ggplot2)
library(dplyr)

# Function to determine text color for contrast
get_text_color <- function(hex_color) {
  if (is.na(hex_color) || !grepl("^#[0-9A-Fa-f]{6}$", hex_color, ignore.case = TRUE)) {
    return("black")
  }
  rgb_vals <- grDevices::col2rgb(hex_color)
  luminance <- 0.2126 * rgb_vals[1,] + 0.7152 * rgb_vals[2,] + 0.0722 * rgb_vals[3,]
  ifelse(luminance > 140, "black", "white")
}

# --- Data Preparation ---
all_colors <- read_yaml("_brand.yml")
color_list <- all_colors[!grepl("font", names(all_colors))]
color_list <- color_list[!sapply(color_list, is.null)]
flat_colors <- unlist(color_list)

color_df <- tibble(
  name = names(flat_colors),
  hex = as.character(unname(flat_colors))
)

# Validation and filtering step
is_valid_hex <- grepl("^#[0-9A-Fa-f]{6}$", color_df$hex, ignore.case = TRUE)
plot_df <- color_df |>
  filter(is_valid_hex) |>
  mutate(
    base_color = sub("-\\d{2}$", "", name),
    tint_level = ifelse(grepl("-\\d{2}$", name), as.numeric(sub(".*-", "", name)), 100)
  ) |>
  rowwise() |>
  mutate(text_color = get_text_color(hex)) |>
  ungroup()

palette_order <- c(
  "north-star-indigo", "glacial-blue", "fog-gray",
  "forest-green", "willamette-green", "mist-grey",
  "marionberry-red", "harvest-gold", "desert-sand", "ashland-charcoal"
)

plot_df <- plot_df |>
  mutate(
    short_name = sub(".*\\.", "", base_color),
    short_name = factor(short_name, levels = palette_order)
  ) |>
  arrange(short_name, desc(tint_level)) |>
  mutate(base_color_ordered = factor(base_color, levels = unique(base_color)))

# Create base plot
base_plot <- ggplot(plot_df, aes(x = factor(tint_level, levels = c(100, 80, 60, 40, 20, 10)),
                     y = base_color_ordered, fill = hex)) +
  geom_tile(color = "white", linewidth = 2) +
  geom_text(aes(label = hex, color = text_color), size = 3, family = "sans") +
  scale_fill_identity() +
  scale_color_identity() +
  scale_y_discrete(limits = rev) +
  labs(x = "Tint Level (% of Original Color)", y = NULL, title = "Brand Color Palette") +
  theme_minimal(base_family = "sans") +
  theme(
    panel.grid = element_blank(),
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(b = 10))
  )

# The knitr setup will automatically create both versions
# Light version  
base_plot + theme_oeda_light()

# Dark version (this will be the second output)
base_plot + theme_oeda_dark()
```

::: {.callout-important title="Using manual ggplot2 themes"}

I've created a `oeda_themes.R` file which is sourced in the setup chunk of this website. This should give svg images of both versions of the plot using `svglite` and then will automatically toggle them when the dark mode is toggled. 

:::

# Example 1: Scatter Plot with Manual Theme Application
```{r scatter-example}
#| fig-cap: "Fuel efficiency vs weight by cylinder count"

# Create base plot without theme
base_plot <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 3, alpha = 0.8) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1) +
  labs(
    title = "Vehicle Fuel Efficiency Analysis",
    subtitle = "Weight vs MPG colored by cylinder count",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon", 
    color = "Cylinders",
    caption = "Data: Motor Trend Car Road Tests (mtcars)"
  ) +
  scale_color_oeda_discrete(palette = "primary")

# The knitr setup will automatically create both versions
# Light version
base_plot + theme_oeda_light()

# Dark version (this will be the second output)
base_plot + theme_oeda_dark()
```

# Example 2: Bar Chart
```{r bar-example}
#| fig-cap: "Average MPG by cylinder count"

# Prepare data
mpg_summary <- mtcars %>%
  group_by(cyl) %>%
  summarise(
    avg_mpg = mean(mpg),
    se = sd(mpg) / sqrt(n()),
    .groups = "drop"
  )

# Create base plot
bar_plot <- ggplot(mpg_summary, aes(x = factor(cyl), y = avg_mpg, fill = factor(cyl))) +
  geom_col(alpha = 0.8, width = 0.7) +
  geom_errorbar(aes(ymin = avg_mpg - se, ymax = avg_mpg + se), 
                width = 0.2, alpha = 0.7) +
  labs(
    title = "Average Fuel Efficiency by Engine Type", 
    subtitle = "Error bars show standard error",
    x = "Number of Cylinders",
    y = "Average Miles per Gallon",
    fill = "Cylinders",
    caption = "Data: Motor Trend Car Road Tests"
  ) +
  scale_fill_oeda_discrete(palette = "cool") +
  guides(fill = "none")  # Remove redundant legend

# Light version
bar_plot + theme_oeda_light()

# Dark version  
bar_plot + theme_oeda_dark()
```

# Example 3: Faceted Plot
```{r facet-example}
#| fig-cap: "Distribution of MPG by transmission type and cylinders"

# Create faceted plot
facet_plot <- ggplot(mtcars, aes(x = mpg, fill = factor(cyl))) +
  geom_histogram(bins = 8, alpha = 0.8, position = "identity") +
  facet_wrap(~ ifelse(am == 0, "Automatic", "Manual"), 
             labeller = label_both) +
  labs(
    title = "Fuel Efficiency Distribution",
    subtitle = "By transmission type and cylinder count",
    x = "Miles per gallon",
    y = "Count",
    fill = "Cylinders",
    caption = "Data: Motor Trend Car Road Tests"
  ) +
  scale_fill_oeda_discrete(palette = "warm")

# Light version
facet_plot + theme_oeda_light()

# Dark version
facet_plot + theme_oeda_dark()
```

# Alternative Method: Using save_dual_plots function
```{r save-function-example}
#| eval: false
#| echo: true

# If you prefer more control, use the save function approach:
my_plot <- ggplot(mtcars, aes(x = hp, y = mpg)) +
  geom_point(aes(color = factor(cyl)), size = 3) +
  labs(title = "Horsepower vs MPG", color = "Cylinders") +
  scale_color_oeda_discrete()

# This saves both versions and returns the light version for display
displayed_plot <- save_dual_plots(my_plot, "custom-plot", width = 10, height = 6)
displayed_plot
```

## Single HTML file

::: {.callout-warning title="Single HTML Files are different"}
Single HTML files do not render a navbar by default. If you don't use the website project, you must copy the following code block into your `.qmd` file's YAML header for each file. Because of this, it is recommended you create content in quarto as a website, instead of a single html file.
:::

```{yaml}
---
title: "OEDA Brand Theme Demo"
author: "Oregon Enterprise Data Analytics"
date: "today"
format: 
  html:
    # --- Add this entire navbar section ---
    navbar:
      title: "Theme Demo"
      logo: /assets/oeda-logo-primary-clean.svg
      logo-alt: "OEDA Logo"
    # --- End of navbar section ---
    theme:
      - theme.scss
      - theme-dark.scss
    toc: true
    toc-float: true
    code-copy: true
---
```